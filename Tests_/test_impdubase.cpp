//
//  test_utilpdu.cpp
//  test_utilpdu
//
//  Created by coderl on 22-1-12.
//  Copyright (c) 2022å¹´blueBling. All rights reserved.
//

#include "ImPduBase.h"
#include "IM.BaseDefine.pb.h"

#include<stdint.h> //uint16_t
#include<stdio.h>
#include<string.h>

#include<vector>
#include<iostream>

using namespace IM::BaseDefine;

using std::vector;
using std::cout;
using std::endl;

int test_impdubase(){

/*
(gdb) x /80xb 0xcfa630
0xcfa630:	0x00	0x00	0x00	0x10	0x00	0x01	0x00	0x00
0xcfa638:	0x00	0x07	0x07	0x01	0x00	0x00	0x00	0x00
0xcfa640:	0x00	0x00	0x00	0x10	0x00	0x01	0x00	0x00
0xcfa648:	0x00	0x07	0x07	0x01	0x00	0x00	0x00	0x00
0xcfa650:	0x00	0x00	0x00	0x10	0x00	0x01	0x00	0x00
0xcfa658:	0x00	0x07	0x07	0x01	0x00	0x00	0x00	0x00
0xcfa660:	0x00	0x00	0x00	0x10	0x00	0x01	0x00	0x00
0xcfa668:	0x00	0x07	0x07	0x01	0x00	0x00	0x00	0x00
0xcfa670:	0x00	0x00	0x00	0x10	0x00	0x01	0x00	0x00
0xcfa678:	0x00	0x07	0x07	0x01	0x00	0x00	0x00	0x00
*/
	uchar_t in_buf[80] = {0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00,
						  0x00, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,
					      0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00,
						  0x00, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,
						  0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00,
						  0x00, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,
						  0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00,
						  0x00, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,
						  0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00,
						  0x00, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00};

	uint32_t pdu_len = 0;
	try {
		while(CImPdu::IsPduAvailable(in_buf, 80, pdu_len)){
		    CImPdu* pPdu = NULL;
			pPdu = CImPdu::ReadPdu(in_buf, pdu_len);

			if (pPdu->GetCommandId() == IM::BaseDefine::CID_OTHER_HEARTBEAT) {
				cout << "msg is HEARTBEAT" << endl;
		        break;
		    }
			cout << "other msg" << endl;
		}

	} catch (CPduException& ex) {
		  cout << "!!!catch exception, err_code=" << ex.GetErrorCode() << ", err_msg=" << ex.GetErrorMsg() << ", close the connection " << endl;
	}


	return 0;
}

int main(){
	test_impdubase();
	return 0;
}
