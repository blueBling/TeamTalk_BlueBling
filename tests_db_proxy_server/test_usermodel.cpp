//
//  test_usermodel.cpp
//  test_usermodel
//
//  Created by blueBling on 22-03-02.
//  Copyright (c) 2022年blueBling. All rights reserved.
//

#include "UserAction.h"
#include "UserModel.h"

#include "IM.Login.pb.h"
#include "IM.Buddy.pb.h"
#include "IM.BaseDefine.pb.h"
#include "IM.Message.pb.h"
#include "util.h"


#include<iostream>


using std::cout;
using std::endl;

string strAudioEnc;

//用于请求更新的用户详情
int test_getChangedUser(){
	uint32_t conn_uuid = 3;

	//(gdb) p pPdu->m_pdu_header 
	//$2 = {length = 39, version = 1, flag = 0, service_id = 2, command_id = 520, seq_num = 0, reversed = 0}


	//(gdb) x/16xb &(pPdu->m_pdu_header)
	//0x974538:	0x27	0x00	0x00	0x00	0x01	0x00	0x00	0x00
	//0x974540:	0x02	0x00	0x08	0x02	0x00	0x00	0x00	0x00

	CImPdu pdu; //构造一个部门信息请求pdu

	
	unsigned char header[16] = {
		0x00,	0x00,	0x00,	0x27,	0x00,	0x01,	0x00,	0x00,
		0x00,	0x02,	0x02,	0x08,	0x00,	0x00,	0x00,	0x00
	};

	pdu.ReadPduHeader(header, 16); //构造pdu头

	
	//(gdb) p pPdu->m_buf 
	//$1 = {m_buffer = 0x974550 "", m_alloc_size = 48, m_write_offset = 39}

	
	//(gdb) x/39xb pPdu->m_buf->m_buffer
	//0x974550:	0x00	0x00	0x00	0x27	0x00	0x01	0x00	0x00
	//0x974558:	0x00	0x02	0x02	0x08	0x00	0x00	0x00	0x00
	//0x974560:	0x08	0x11	0x10	0xf2	0xd8	0xd7	0x90	0x06
	//0x974568:	0xa2	0x01	0x0c	0x00	0x00	0x00	0x01	0x00
	//0x974570:	0x00	0x00	0x0e	0x00	0x00	0x00	0x00

	unsigned char body[39] = {
		0x00,	0x00,	0x00,	0x27,	0x00,	0x01,	0x00,	0x00,
		0x00,	0x02,	0x02,	0x08,	0x00,	0x00,	0x00,	0x00,
		0x08,	0x11,	0x10,	0xf2,	0xd8,	0xd7,	0x90,	0x06,
		0xa2,	0x01,	0x0c,	0x00,	0x00,	0x00,	0x01,	0x00,
		0x00,	0x00,	0x0e,	0x00,	0x00,	0x00,	0x00
	};

	pdu.Write(body, 39); //构造pdu体

	DB_PROXY::getChangedUser(&pdu, conn_uuid);
	
	return 0;
}

void clearUnreadMsgCounter(CImPdu* pPdu, uint32_t conn_uuid)
{
	IM::Message::IMMsgDataReadAck msg;
	if(msg.ParseFromArray(pPdu->GetBodyData(), pPdu->GetBodyLength()))
	{
		uint32_t nUserId = msg.user_id();
		uint32_t nFromId = msg.session_id();
		IM::BaseDefine::SessionType nSessionType = msg.session_type();
		CUserModel::getInstance()->clearUserCounter(nUserId, nFromId, nSessionType);
		log("userId=%u, peerId=%u, type=%u", nFromId, nUserId, nSessionType);
	}
	else
	{
		log("parse pb failed");
	}
}

//用于请求清除未读消息计数
int test_clearUnreadMsgCounter(){
	uint32_t conn_uuid = 12;

	//(gdb)  p pPdu->m_pdu_header
	//$1 = {length = 24, version = 1, flag = 0, service_id = 3, command_id = 771, seq_num = 0, reversed = 0}


	//(gdb) x/16xb &(pPdu->m_pdu_header)
	//0x96fbd8:	0x18	0x00	0x00	0x00	0x01	0x00	0x00	0x00
	//0x96fbe0:	0x03	0x00	0x03	0x03	0x00	0x00	0x00	0x00


	CImPdu pdu; //构造一个部门信息请求pdu

	
	unsigned char header[16] = {
		0x00,	0x00,	0x00,	0x18,	0x00,	0x01,	0x00,	0x00,
		0x00,	0x03,	0x03,	0x03,	0x00,	0x00,	0x00,	0x00
	};

	pdu.ReadPduHeader(header, 16); //构造pdu头

	
	//(gdb) p pPdu->m_buf 
	//$2 = {m_buffer = 0x96fbf0 "", m_alloc_size = 30, m_write_offset = 24}


	//(gdb) x/24xb pPdu->m_buf->m_buffer
	//0x96fbf0:	0x00	0x00	0x00	0x18	0x00	0x01	0x00	0x00
	//0x96fbf8:	0x00	0x03	0x03	0x03	0x00	0x00	0x00	0x00
	//0x96fc00:	0x08	0x01	0x10	0x11	0x18	0x02	0x20	0x01


	unsigned char body[24] = {
		0x00,	0x00,	0x00,	0x18,	0x00,	0x01,	0x00,	0x00,
		0x00,	0x03,	0x03,	0x03,	0x00,	0x00,	0x00,	0x00,
		0x08,	0x01,	0x10,	0x11,	0x18,	0x02,	0x20,	0x01
	};

	pdu.Write(body, 24); //构造pdu体

	clearUnreadMsgCounter(&pdu, conn_uuid);
	
	return 0;
}


int main(){
	test_getChangedUser();

	test_clearUnreadMsgCounter();

	//这里mysql和redis连接池未释放存在内存泄漏问题，解决方法参考test_dbpool
	
	return 0;
}
